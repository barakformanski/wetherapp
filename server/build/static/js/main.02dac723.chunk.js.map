{"version":3,"sources":["components/countrySelect/CountrySelector.js","components/cordinateFounder/CordinateFounder.js","components/Forecast/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["CountrySelector","setCountry","useState","value","setValue","options","useMemo","countryList","getData","onChange","label","toLowerCase","CordinateFounder","Forecast","slicedFormat","Date","toISOString","slice","dateStart","duration","everyNumOfHour","country","coordinates","setCoordinates","responseObj","setResponseObj","handleChange","e","setStateName","console","log","target","replace","href","onSubmit","evt","preventDefault","alert","type","map","item","index","date","onClick","axios","get","auth","username","password","then","res","data","dates","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAiBeA,MAbf,YAA0C,IAAfC,EAAc,EAAdA,WACzB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAUC,mBAAQ,kBAAMC,MAAcC,YAAW,IAQvD,OAAO,cAAC,IAAD,CAAQH,QAASA,EAASF,MAAOA,EAAOM,SANzB,SAACN,GACrBC,EAASD,GAETF,EAAWE,EAAMO,MAAMC,mB,MCwEZC,IC8CAC,EA1GE,WACf,IAEMC,GAFa,IAAIC,MACMC,cACEC,MAAM,GAAI,GACzC,EAAkCf,mBAASY,GAA3C,mBAAOI,EAAP,KACA,GADA,KACgChB,mBAAS,IAAzC,mBAAOiB,EAAP,KACA,GADA,KAC4CjB,mBAAS,KAArD,mBAAOkB,EAAP,KACA,GADA,KAC8BlB,mBAAS,WAAvC,mBAAOmB,EAAP,KAAgBpB,EAAhB,KACA,EAAsCC,mBAAS,IAA/C,mBAAOoB,EAAP,KAAoBC,EAApB,KAGA,EAAsCrB,qBAAtC,mBAAOsB,EAAP,KAAoBC,EAApB,KAEA,SAASC,EAAaC,EAAGC,GACvBC,QAAQC,IAAI,IAAKH,EAAEI,OAAO5B,MAAM6B,QAAQ,KAAM,KAE9CJ,EAAaD,EAAEI,OAAO5B,MAAM6B,QAAQ,KAAM,KAiC5C,OACE,gCACE,iEACA,mBACEC,KAAK,iMACLF,OAAO,sBAFT,wBAOA,cAAC,EAAD,CAAiB9B,WAAYA,IAE7B,uBAAMiC,SA1CW,SAACC,GACpBA,EAAIC,iBACJC,MAAM,mBAAD,OAAoBhB,EAApB,YAA+BC,KAwClC,UACE,6CAEE,uBACEgB,KAAK,OACLnC,MAAOkB,EAEPZ,SAAU,SAACkB,GAAD,OAAOD,EAAaC,EAAG1B,SAIrC,iDAEE,uBACEqC,KAAK,OACLnC,MAAOmB,EACPb,SAAU,SAACkB,GAAD,OAAOD,EAAaC,EAAGJ,SAarC,uBAAOe,KAAK,SAASnC,MAAM,cAE5BqB,GACCA,EAAYe,KAAI,SAACC,EAAMC,GAAP,OACd,gCACE,0CAAaD,EAAKE,KAAKV,QAAQ,QAAS,KAAKf,MAAM,GAAI,MACvD,2CAAcuB,EAAKrC,MAAnB,gBAFQsC,MAMd,wBAAQE,QA5EQ,WAClBd,QAAQC,IAAI,WACZD,QAAQC,IAAI,cAAehB,GAE3B8B,IACGC,IADH,uCAMoC3B,EANpC,aAMkDC,EANlD,eAMiEC,EANjE,oBAM2FE,EAN3F,SAQI,CACEwB,KAAM,CACJC,SAAU,iBACVC,SAAU,mBAIfC,MAAK,SAACC,GACLrB,QAAQC,IAAIoB,EAAIC,KAAKA,KAAK,GAAG7B,YAAY,GAAG8B,OAC5C3B,EAAeyB,EAAIC,KAAKA,KAAK,GAAG7B,YAAY,GAAG8B,WAuDjD,8EC3GSC,MAdf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qDAEF,+BACE,cAAC,EAAD,MAEF,yECCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.02dac723.chunk.js","sourcesContent":["import React, { useState, useMemo } from \"react\";\r\nimport Select from \"react-select\";\r\nimport countryList from \"react-select-country-list\";\r\n\r\nfunction CountrySelector({ setCountry }) {\r\n  const [value, setValue] = useState(\"\");\r\n  const options = useMemo(() => countryList().getData(), []);\r\n\r\n  const changeHandler = (value) => {\r\n    setValue(value);\r\n\r\n    setCountry(value.label.toLowerCase());\r\n  };\r\n\r\n  return <Select options={options} value={value} onChange={changeHandler} />;\r\n}\r\n\r\nexport default CountrySelector;\r\n","// needs google map key yo use thus option\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nimport Geocode from \"react-geocode\";\r\n\r\nfunction CordinateFounder() {\r\n  const [cordinate, setCordinate] = useState(\"\");\r\n  // set Google Maps Geocoding API for purposes of quota management. Its optional but recommended.\r\n  // Geocode.setApiKey(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");\r\n\r\n  // set response language. Defaults to english.\r\n  // Geocode.setLanguage(\"en\");\r\n\r\n  // set response region. Its optional.\r\n  // A Geocoding request with region=es (Spain) will return the Spanish city.\r\n  // Geocode.setRegion(\"es\");\r\n\r\n  // set location_type filter . Its optional.\r\n  // google geocoder returns more that one address for given lat/lng.\r\n  // In some case we need one address as response for which google itself provides a location_type filter.\r\n  // So we can easily parse the result for fetching address components\r\n  // ROOFTOP, RANGE_INTERPOLATED, GEOMETRIC_CENTER, APPROXIMATE are the accepted values.\r\n  // And according to the below google docs in description, ROOFTOP param returns the most accurate result.\r\n  // Geocode.setLocationType(\"ROOFTOP\");\r\n\r\n  // Enable or disable logs. Its optional.\r\n  Geocode.enableDebug();\r\n\r\n  // Get address from latitude & longitude.\r\n  // Geocode.fromLatLng(\"48.8583701\", \"2.2922926\").then(\r\n  //   (response) => {\r\n  //     const address = response.results[0].formatted_address;\r\n  //     console.log(address);\r\n  //   },\r\n  //   (error) => {\r\n  //     console.error(error);\r\n  //   }\r\n  // );\r\n\r\n  // Get formatted address, city, state, country from latitude & longitude when\r\n  // Geocode.setLocationType(\"ROOFTOP\") enabled\r\n  // the below parser will work for most of the countries\r\n  // Geocode.fromLatLng(\"48.8583701\", \"2.2922926\").then(\r\n  //   (response) => {\r\n  //     const address = response.results[0].formatted_address;\r\n  //     let city, state, country;\r\n  //     for (let i = 0; i < response.results[0].address_components.length; i++) {\r\n  //       for (let j = 0; j < response.results[0].address_components[i].types.length; j++) {\r\n  //         switch (response.results[0].address_components[i].types[j]) {\r\n  //           case \"locality\":\r\n  //             city = response.results[0].address_components[i].long_name;\r\n  //             break;\r\n  //           case \"administrative_area_level_1\":\r\n  //             state = response.results[0].address_components[i].long_name;\r\n  //             break;\r\n  //           case \"country\":\r\n  //             country = response.results[0].address_components[i].long_name;\r\n  //             break;\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //     console.log(city, state, country);\r\n  //     console.log(address);\r\n  //   },\r\n  //   (error) => {\r\n  //     console.error(error);\r\n  //   }\r\n  // );\r\n\r\n  // Get latitude & longitude from address.\r\n  Geocode.fromAddress(\"Eiffel Tower\").then(\r\n    (response) => {\r\n      const { lat, lng } = response.results[0].geometry.location;\r\n      console.log(lat, lng);\r\n      setCordinate({ lat, lng });\r\n    },\r\n    (error) => {\r\n      console.error(error);\r\n    }\r\n  );\r\n  return cordinate;\r\n}\r\nexport default CordinateFounder;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport CountrySelector from \"../countrySelect/CountrySelector\";\r\nimport CordinateFounder from \"../cordinateFounder/CordinateFounder\";\r\nconst options = {\r\n  method: \"GET\",\r\n  //   url: \"https://community-open-weather-map.p.rapidapi.com/find\",\r\n  url: \"https://none_formanski:HwR8eabI7x5BM@api.meteomatics.com/2021-08-16T00:00:00Z--2021-08-30T00:00:00Z:PT1H/t_2m:C/46.75246,5.98434/json\",\r\n\r\n  //   params: {\r\n  //     q: \"london\",\r\n  //     cnt: \"2\",\r\n  //     mode: \"null\",\r\n  //     lon: \"0\",\r\n  //     type: \"link, accurate\",\r\n  //     lat: \"0\",\r\n  //     units: \"imperial, metric\",\r\n  //   },\r\n  //   headers: {\r\n  //     \"x-rapidapi-key\": \"e9af386f89mshde6ec1497460b94p11f34bjsn132e21808037\",\r\n  //     \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\r\n  //   },\r\n};\r\nconst Forecast = () => {\r\n  const todaysDate = new Date();\r\n  const iosFormat = todaysDate.toISOString();\r\n  const slicedFormat = iosFormat.slice(0, -8);\r\n  const [dateStart, setDateStart] = useState(slicedFormat);\r\n  const [duration, setDuration] = useState(5);\r\n  const [everyNumOfHour, setEveryNumOfHour] = useState(12);\r\n  const [country, setCountry] = useState(\"israel\");\r\n  const [coordinates, setCoordinates] = useState(\"\");\r\n  //   const [dateStart, setDateStart] = useState(\"2021-08-16T00:00:00\");\r\n  //   const [dateStart, setDateStart] = useState(\"2021-08-16\");\r\n  const [responseObj, setResponseObj] = useState();\r\n\r\n  function handleChange(e, setStateName) {\r\n    console.log(\"e\", e.target.value.replace(/ /g, \"\"));\r\n    // setCountry(e.target.value.toLocaleLowerCase());\r\n    setStateName(e.target.value.replace(/ /g, \"\"));\r\n  }\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    alert(`Submitting Name ${country},${coordinates}`);\r\n  };\r\n\r\n  const getForecast = () => {\r\n    console.log(\"loading\");\r\n    console.log(\"date start:\", slicedFormat);\r\n\r\n    axios\r\n      .get(\r\n        // \"https://@api.meteomatics.com/2021-08-16T00:00:00Z--2021-08-30T00:00:00Z:PT1H/t_2m:C/46.75246,5.98434/json\",\r\n        // \"https://@api.meteomatics.com/2021-08-16T00:00:00       ZP10D:PT12H/t_2m:C/46.75246,5.98434/json\",\r\n        // https://api.meteomatics.com     /2021-08-17T07:13:03.904Z ZP10D:PT12H/t_2m:C/israel:0.1,0.1/json\r\n        // `https://@api.meteomatics.com/${dateStart}ZP${duration}D:PT${everyNumOfHour}H/t_2m:C/${country}:0.1,0.1/json`,\r\n        `https://@api.meteomatics.com/${dateStart}ZP${duration}D:PT${everyNumOfHour}H/t_2m:C/${coordinates}/json`,\r\n\r\n        {\r\n          auth: {\r\n            username: \"none_formanski\",\r\n            password: \"HwR8eabI7x5BM\",\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res.data.data[0].coordinates[0].dates);\r\n        setResponseObj(res.data.data[0].coordinates[0].dates);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Find Current Weather Conditions</h2>\r\n      <a\r\n        href=\"https://www.google.com/maps/place/%D7%90%D7%A8%D7%99%D7%90%D7%9C%E2%80%AD/@32.0923756,35.1401115,13z/data=!3m1!4b1!4m5!3m4!1s0x151d270b0797feeb:0xe8ae03cbd935baad!8m2!3d32.104637!4d35.174514\"\r\n        target=\"noreferrer noopener\"\r\n      >\r\n        Google Map\r\n      </a>\r\n\r\n      <CountrySelector setCountry={setCountry} />\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          country:\r\n          <input\r\n            type=\"text\"\r\n            value={country}\r\n            // onChange={(e) => setCountry(e.target.value.toLocaleLowerCase())}\r\n            onChange={(e) => handleChange(e, setCountry)}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          coordinates:\r\n          <input\r\n            type=\"text\"\r\n            value={coordinates}\r\n            onChange={(e) => handleChange(e, setCoordinates)}\r\n          />\r\n        </label>\r\n\r\n        {/* <label>\r\n          Pick a city:\r\n          <select value={city} onChange={handleChange(city)}>\r\n            <option value=\"tel aviv\">tel Aviv</option>\r\n            <option value=\"Jerusalem\">Jerusalem</option>\r\n            <option value=\"eilat\">Eilat</option>\r\n          </select>\r\n        </label> */}\r\n\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n      {responseObj &&\r\n        responseObj.map((item, index) => (\r\n          <div key={index}>\r\n            <span>date: {item.date.replace(/[TZ]/g, \" \").slice(0, -4)}</span>\r\n            <span> temp: {item.value} celzius</span>\r\n          </div>\r\n        ))}\r\n\r\n      <button onClick={getForecast}>\r\n        Get Forecast for 10 days at 12 o'clock pm, and 00 o'clock am\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nexport default Forecast;\r\n","import \"./App.css\";\nimport Forecast from \"./components/Forecast/Forecast\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Weather App</h1>\n      </header>\n      <main>\n        <Forecast />\n      </main>\n      <footer>Page created by barak formanski</footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}